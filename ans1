This problem was asked by Amazon.

An sorted array of integers was rotated an unknown number of times.

Given such an array, find the index of the element in the array in faster than linear time. If the element doesn't exist in the array, return null.

For example, given the array [13, 18, 25, 2, 8, 10] and the element 8, return 4 (the index of 8 in the array).

You can assume all the integers in the array are unique.


## The key point here is to not exceed "O(n)" while searching for the element.
Even the merge sort will exceed O(n) because it O(nlogn).
The big O's that are faster than O(n) are O(logn) or O(1).

Typical O(logn) is involved with the binary search method but the question is how we sort this in a log(n) or constant manner..



def binary_search(array,target):

  mid = len(array) // 2
  
  if target == array[mid]:
     return mid
  
  elif target > array[mid]:
     binary_search(array[mid:],target)
  
  else:
     binary_search(array[:mid],target)


